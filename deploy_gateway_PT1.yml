---
- name: Inicia Deploy Gateway # Nome do playbook
  hosts: "{{ host_awx }}" # Define os hosts de destino
  become: yes # Tornar-se root durante a execução do playbook
  become_user: root # Define o usuário para se tornar (root)
  become_method: sudo # Define o metodo de se tornar como sudo
  gather_facts: yes # Coletar fatos sobre os hosts de destino
  tasks: # Lista de tarefas a serem executadas

    - name: Criar diretório de logs
      # Cria um diretório para logs se ele não existir
      file:
        path: "/var/log/ansible_deploy_logs"
        state: directory
        owner: awx
        group: sudo
        mode: 0755
      when: not ansible_check_mode

    - name: Criar arquivo de log
      # Cria um arquivo de log se ele não existir
      file:
        path: "/var/log/ansible_deploy_logs/deploy_log.txt"
        state: touch
        owner: awx
        group: sudo
        mode: 0644
      when: not ansible_check_mode

    - name: Log Message Iniciando deploy
      # Registra uma mensagem indicando o início do deployment
      shell: echo "\033[32m####_INICIANDO_UPDATE####\033[0m" >> /var/log/ansible_deploy_logs/deploy_log.txt 2>&1

    - name: Executa o comando apt-get update
      # Atualiza a lista de pacotes usando apt-get
      shell: apt-get update -y > /var/log/ansible_deploy_logs/deploy_log.txt 2>&1
      async: 600
      poll: 0
      register: update_result
      notify:
        - Log Message

    - name: Espera 2 segundos
      # Pausa por 2 segundos
      pause:
        seconds: 2
      notify:
        - Log Message

    - name: Log Message Iniciando install sshpass
      # Registra uma mensagem indicando o início da instalação do pacote sshpass
      shell: echo "\033[32m####_INICIANDO_INSTALL_SSHPASS####\033[0m" >> /var/log/ansible_deploy_logs/deploy_log.txt 2>&1

    - name: Instalar o pacote sshpass
      # Tarefa para instalar o pacote sshpass
      apt:
        name: sshpass
        state: present

    - name: Espera 2 segundos
      # Pausa por 2 segundos
      pause:
        seconds: 2
      notify:
        - Log Message

    - name: Log Message Iniciando deploy
      # Registra uma mensagem indicando o início do deployment
      shell: echo "\033[32m####_INICIANDO_UPGRADE####\033[0m" >> /var/log/ansible_deploy_logs/deploy_log.txt 2>&1

    - name: Executa o comando apt-get update
      # Atualiza a lista de pacotes usando apt-get
      shell: apt-get upgrade -y > /var/log/ansible_deploy_logs/deploy_log.txt 2>&1
      async: 600
      poll: 0
      register: update_result
      notify:
        - Log Message

    - name: Espera 1 segundo
      # Pausa por 1 segundo
      pause:
        seconds: 1
      notify:
        - Log Message

    - name: Log Message Iniciando a instalação de pacotes adicionais
      # Registra uma mensagem indicando o início da instalação de pacotes adicionais
      shell: echo "\033[32m####_INICIANDO_INSTALACAO_DE_PACOTES_ADICIONAIS####\033[0m" >> /var/log/ansible_deploy_logs/deploy_log.txt 2>&1

    - name: Instala pacotes adicionais
      # Instala pacotes adicionais
      shell: apt install -y apache2-utils apt-transport-https bash-completion ca-certificates curl gnupg software-properties-common tcpdump wget ufw net-tools tree vim > /var/log/ansible_deploy_logs/deploy_log.txt 2>&1
      async: 600
      poll: 0
      register: install_result
      notify:
        - Log Message

    - name: Espera 3 segundos
      # Pausa por 3 segundos
      pause:
        seconds: 3
      notify:
        - Log Message

    - name: Log Message Iniciando a instalação do Docker
      # Registra uma mensagem indicando o início da instalação do Docker
      shell: echo "\033[32m####_INICIANDO_INSTALACAO_DOCKER####\033[0m" >> /var/log/ansible_deploy_logs/deploy_log.txt 2>&1

    - name: Instalando Docker
      # Instala o Docker
      shell: apt install -y docker.io >> /var/log/ansible_deploy_logs/deploy_log.txt 2>&1
      async: 600
      poll: 0
      register: docker_install_result
      notify:
        - Log Message

    - name: Espera 2 segundos
      # Pausa por 2 segundos
      pause:
        seconds: 2
      notify:
        - Log Message

    - name: Log Message - Download de pacotes Microsoft
      # Registra uma mensagem indicando o início do download de pacotes da Microsoft
      shell: echo "\033[32m####_INICIANDO_DOWNLOAD_MICROSFT_####\033[0m" >> /var/log/ansible_deploy_logs/deploy_log.txt 2>&1

    - name: Instalação de pacotes Microsoft
      # Realiza o download e a instalação de pacotes da Microsoft
      shell: wget https://packages.microsoft.com/config/debian/10/packages-microsoft-prod.deb -O ~/packages-microsoft-prod.deb && sudo dpkg -i ~/packages-microsoft-prod.deb
      async: 600
      poll: 0
      register: https_install_result
      notify:
        - Log Message

    - name: Log Message - Instalação de pacotes HTTPS
      # Registra uma mensagem indicando a instalação de pacotes HTTPS
      shell: echo "\033[32m####_INICIANDO_INSTALACAO_HTTPS_####\033[0m" >> /var/log/ansible_deploy_logs/deploy_log.txt 2>&1

    - name: Instalação de pacotes HTTPS
      # Instalação de pacotes HTTPS
      shell: sudo apt-get install -y apt-transport-https >> /var/log/ansible_deploy_logs/deploy_log.txt 2>&1
      async: 600
      poll: 0
      register: https_install_result
      notify:
        - Log Message

    - name: Espera 2 segundos
      # Pausa por 2 segundos
      pause:
        seconds: 2
      notify:
        - Log Message

    - name: Log Message - Liberação de firewall
      # Registra uma mensagem indicando a liberação de portas no firewall
      shell: echo "\033[32m####_INICIANDO_LIBERACAO_DE_PORTAS_####\033[0m" >> /var/log/ansible_deploy_logs/deploy_log.txt 2>&1

    - name: Liberação de portas no firewall
      # Liberação de portas no firewall
      shell: sudo ufw allow 22,25,80,443,2376,2377,5432,8088,5038,8085,4789,7946/tcp && sudo ufw allow 4369,5671,5672/tcp && sudo ufw allow 15671:15672/tcp \
        && sudo ufw allow 4789,7946,4520,4569,4521,4571,5060,5061,5065,10000:20000/udp >> /var/log/ansible_deploy_logs/deploy_log.txt 2>&1
      become: yes

    - name: Log Message - Habilitando UFW
      # Registra uma mensagem indicando a habilitação do UFW (Uncomplicated Firewall)
      shell: echo "\033[32m####_HABILITANDO_UFW_####\033[0m" >> /var/log/ansible_deploy_logs/deploy_log.txt 2>&1

    - name: Habilitando UFW
      # Habilita o UFW (Uncomplicated Firewall)
      shell: sudo ufw --force enable >> /var/log/ansible_deploy_logs/deploy_log.txt 2>&1
      become: yes

    - name: Log Message - UFW Status
      # Registra uma mensagem informando o status do UFW
      shell: echo "\033[32m####_INFORMA_STATUS_UFW_####\033[0m" >> /var/log/ansible_deploy_logs/deploy_log.txt 2>&1

    - name: Comando para informar o status do UFW
      # Comando para informar o status do UFW
      shell: sudo ufw status >> /var/log/ansible_deploy_logs/deploy_log.txt 2>&1
      become: yes

    - name: Log Message criando volumes
      # Registra uma mensagem indicando o início da criação do diretório volumes
      shell: echo "\033[32m####_INICIANDO_VOLUMES####\033[0m" >> /var/log/ansible_deploy_logs/deploy_log.txt 2>&1

    - name: Criar diretórios usando o módulo file
      file:
        path: /var/volumes
        state: directory
        mode: "0775"  # Define as permissões para 775 (rwxrwxr-x)
      ignore_errors: yes

    - name: Criar diretórios dentro de /var/volumes
      file:
        path: "/var/volumes/{{ item }}"
        state: directory
        mode: "0775"
      loop:
        - backend/logs
        - rabbitmq/logs
        - bd/logs
        - frontend/conf.d
        - gateway/includes
        - gateway/logs
        - worker/logs
        - gateway/logs/cdr-csv
        - gateway/logs/cdr-custom
        - loadbalancer/includes
        - voice/logs
        - voice/logs/cdr-csv
        - voice/logs/cdr-custom
      ignore_errors: yes

    - name: Verificar Status dos volumes criados
      become: yes
      tasks:
        - name: Comando ls para informar a criação dos volumes
          shell: ls /var/volumes/ >> /var/log/ansible_deploy_logs/deploy_log.txt 2>&1
  
  
  handlers: # Lista de manipuladores a serem executados

    - name: Log Message  # Registra uma mensagem indicando a conclusão de uma tarefa
      debug:
        msg: "{{ ansible_date_time.iso8601 }} - {{ ansible_task_name }} concluído com sucesso."
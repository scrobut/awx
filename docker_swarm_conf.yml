---
- name: Inicia Deploy Gateway e Configuracao Docker Swarm
  hosts: "{{ host_awx }}"
  become: yes
  become_user: root
  gather_facts: yes
  vars:
    swarm_join_command: null  # Defina a variável como nula no início
  tasks:
    - name: Log Message Iniciando docker swarm
      gather_facts: no
      shell: echo "\033[32m####_INICIANDO_SWARM####\033[0m" >> /var/log/ansible_deploy_logs/deploy_log.txt 2>&1

    - name: Inicializar Docker Swarm
      become: yes
      command: docker swarm init
      register: swarm_init_output

    - name: Verificar se o Swarm foi inicializado
      become: yes
      assert:
        that: "'Swarm initialized' in swarm_init_output.stdout"

    - name: Extrair o comando de junção do Swarm
      become: yes
      set_fact:
        swarm_join_command: "{{ swarm_init_output.stdout | regex_search('docker swarm join --token [^ ]+ [0-9:.]+') }}"
      when: swarm_init_output.stdout is defined

    - name: Salvar o swarm_join_command em um arquivo
      become: yes
      copy:
        content: "{{ swarm_join_command }}"
        dest: /tmp/swarm_join_command.txt
      when: swarm_join_command is defined

    - name: Log Message copiando arquivo para voice
      gather_facts: no
      shell: echo "\033[32m####_INICIANDO_SCP_PARA_VOICE####\033[0m" >> /var/log/ansible_deploy_logs/deploy_log.txt 2>&1

    - name: Copiar arquivo para o host_voice a partir do host_awx usando SCP
      become: yes
      command: sshpass -p {{ senha_awx }} scp -o StrictHostKeyChecking=no /tmp/swarm_join_command.txt {{ user_machine }}@{{ host_voice }}:/tmp/swarm_join_command.txt

    - name: Acessar Nó para Ingressar no Swarm
      become: yes
      hosts: "{{ host_voice }}"
      tasks:
        - name: Ler o conteúdo do arquivo swarm_join_command.txt
          shell: cat /tmp/swarm_join_command.txt
          register: swarm_join_command_content
        - debug:
            var: swarm_join_command_content.stdout

    - name: Log Message inserindo chave para conectar ao leader
      gather_facts: no
      hosts: "{{ host_voice }}"
      shell: echo "\033[32m####_INICIANDO_JOIN_MANAGER####\033[0m" >> /var/log/ansible_deploy_logs/deploy_log.txt 2>&1

    - name: Executar o comando a partir do arquivo swarm_join_command.txt
      become: yes
      hosts: "{{ host_voice }}"
      shell: "{{ swarm_join_command_content.stdout }}"

    - name: Log Message mostra resultado das nodes
      gather_facts: no
      hosts: "{{ host_awx }}"
      become: yes
      shell: echo "\033[32m####_INICIANDO_NODE_LS####\033[0m" >> /var/log/ansible_deploy_logs/deploy_log.txt 2>&1

    - name: Verificar Status do Nó no Swarm
      become: yes
      hosts: "{{ host_awx }}"
      shell: docker node ls >> /var/log/ansible_deploy_logs/deploy_log.txt 2>&1

    - name: Adicione a label main ao node principal
      hosts: "{{ host_awx }}"
      become: yes
      tasks:
        - name: Escrever mensagem no log
          shell: echo "\033[32m####_INCLUINDO _LABEL_GW####\033[0m" >> /var/log/ansible_deploy_logs/deploy_log.txt 2>&1
    
        - name: Executar 'docker node ls'
          shell: docker node update --label-add main=true {{ host_nome_gw }}
    
    - name: Adicione a label main ao node voice
      hosts: "{{ host_voice }}"
      become: yes
      tasks:
        - name: Escrever mensagem no log
          shell: echo "\033[32m####_INCLUINDO _LABEL_VOICE####\033[0m" >> /var/log/ansible_deploy_logs/deploy_log.txt 2>&1
    
        - name: Executar 'docker node ls'
          shell: docker node update --label-add main=true {{ host_nome_voice }}
    
    - name: Adicionar variáveis ao ~/.bashrc e reconectar à VM
      hosts: "{{ host_awx }}"
      gather_facts: no
      tasks:
        - name: Definir as variáveis a serem adicionadas
          set_fact:
            bashrc_lines:
              - 'export ORION_ARCH=amd64'
              - 'export ORION_REGISTRY=dbmorion'
              - 'export ORION_ENTRYPOINT={{ host_awx }}'
              - 'export ASPNETCORE_ENVIRONMENT={{ orion_version }}'
    
        - name: Adicionar as linhas ao arquivo ~/.bashrc
          blockinfile:
            path: ~/.bashrc
            insertbefore: EOF
            block: |
              {% for line in bashrc_lines %}
              {{ line }}
              {% endfor %}
    
        - name: Reconectar à VM
          command: bash -c "exec bash"
          async: 0
          poll: 0
    
    - name: Exibir variáveis de ambiente
      hosts: "{{ host_awx }}"
      gather_facts: no
      tasks:
        - name: Exibir variáveis de ambiente
          command: echo $ORION_ARCH && echo $ORION_REGISTRY && echo $ORION_ENTRYPOINT && echo $ASPNETCORE_ENVIRONMENT
    
    - name: Autenticar no Docker Registry
      hosts: "{{ host_awx }}"  # Isso deve ser executado localmente
      gather_facts: no  # Não é necessário coletar fatos
      tasks:
        - name: Autenticar no Docker Registry
          expect:
            command: docker login
            responses:
              'Username:': "{{ registry_username }}"
              'Password:': "{{ registry_password }}"
          register: docker_login_output
    
        - name: Exibir a saída do comando
          debug:
            var: docker_login_output.stdout_lines
